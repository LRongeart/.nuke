#!/usr/bin/env python

#
# NIMBY - A small user interface that provides control over Tractor
# jobs that are running on the user's workstation. Users may run a
# local Tractor blade on their workstations because they want to
# run their own "batch" jobs there, or because they sometimes want
# allow their workstation to "become part of the farm" when it would
# otherwise be idle. The NIMBY app lets users have some control over
# when their machine is available, and which types of jobs it will run.
#
# The modes selectable from the NIMBY interface include:
# - allow only jobs spooled from the local machine
# - allow only the "local commands" from locally spooled jobs
# - allow all remote jobs from any job owner (as long as service keys match)
# - only allow remote jobs when the machine is "idle" -- as determined
#   by the presence of a screensaver, or prolonged lack of mouse movement
#   on some platforms.
#
# The name "NIMBY" derives from the phrase "Not In My Back Yard" which 
# is sometimes applied in political discussions where everyone agrees
# that some particular service under discussion is necessary for the
# public good, but no one actually wants the service located near them.
#
# ____________________________________________________________________ 
# Copyright (C) 2011-2014 Pixar Animation Studios. All rights reserved.
#
# The information in this file is provided for the exclusive use of the
# software licensees of Pixar.  It is UNPUBLISHED PROPRIETARY SOURCE CODE
# of Pixar Animation Studios; the contents of this file may not be disclosed
# to third parties, copied or duplicated in any form, in whole or in part,
# without the prior written permission of Pixar Animation Studios.
# Use of copyright notice is precautionary and does not imply publication.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
# ____________________________________________________________________ 
#

import os
import sys
import platform
import optparse
import atexit
import logging
import logging.handlers
import errno
import getpass
import datetime
import PySide.QtGui

from NimbyRunner import NimbyRunner


def main():
    '''
    nimby - handle cmdline args and begin...
    '''

    appName =        "Pixar nimby"
    appVersion =     "2.0.0"
    
    appBuild = "%s %s" % (appName, appVersion)
    
    defaultBPort = 9005  # default port that the blade listens on
    
    # add a new log level to logging module
    logging.TRACE=5
    logging.addLevelName(5, 'TRACE')

    # portability fix for windows
    if not hasattr(errno, "ERROR_ALREADY_EXISTS"):
        errno.ERROR_ALREADY_EXISTS = 183
        
    desc = """NIMBY allows you to control which Tractor jobs 
              run on the local machine via tractor-blade."""
    defaultMon = "tractor-engine"
    defaultMPort = 80         

    optparser = optparse.OptionParser(description=desc)    
    
    optparser = optparse.OptionParser(usage="%prog [options]", 
        version=appBuild)
                         
    optparser.add_option("--engine", "--monitor", dest="monitor", 
            type="string", default=defaultMon,
            help="hostname of the central tractor-engine host, "
                 "default '"+defaultMon+"'. "
                 "Used only if connection info is not provided directly "
                 "by the blade status report.")
    optparser.add_option("-P", dest="mPort", 
            type="int", default=defaultMPort,
            help="port on which tractor-engine is listening, "
                 "usually specified as part of --engine=host:port, "
                 "is %default")                 
    optparser.add_option("-L", dest="bport",
            type="int", default=defaultBPort,
            help="port on which the local blade is listening for admin queries, "
                 "default is %default")

    optparser.add_option("--hname", dest="altname",
            type="string", default=None,
            help="alternate name for the blade host, registered with the "
                 "engine. Default is the locally-derived hostname.")
                 
    optparser.add_option("--nimby", dest="nimby",
            type="string", default="screensaver",
            help="pre-set restrictions on jobs that the blade will execute; "
                 "'1' to only accept jobs spooled from this blade's host, "
                 "'0' to allways allow remote jobs, "
                 "'private' to only accept remote or local jobs for current user, "
                 "and 'screensaver' to only accept remote jobs when "
                 " the screen saver is active.")
    optparser.add_option("--querytime", dest="jobquerytime",
            type="int", default="5",
            help="the query interval (in seconds) that nimby will "
                 "use when querying the blade for running jobs."
                 " The default is 5 seconds.")
            
    try:
        userName = getpass.getuser()
    except:
        if sys.platform == 'win32':
            try:
                import ctypes
                dll=ctypes.windll.LoadLibrary("advapi32.dll")
                buff = ctypes.create_string_buffer('\0' * 256)
                bufflen = ctypes.c_long(256)
                fun = dll.GetUserNameA
                fun(buff, ctypes.byref(bufflen))
                user = buff.value
            except:
                print("Error getting user name.")
                return
                                 
    optparser.add_option("--user", dest="userName",
            type="string", default=userName,
            help="tractor user to login [default: %default]")
    optparser.add_option("--pass", "--passwd", dest="passwd",
            type="string", default=None,
            help="password for tractor user to login [default: %default]")
    optparser.add_option("--configfile", dest="configfile",
            type="string", default=None,
            help="file containing login and password data"
            " [default: %default]")

    optparser.set_defaults(loglevel=logging.WARNING)
    group = optparse.OptionGroup(optparser, "Logging Options",
    "Defines logging level and logfile. [default: WARNING]")

    group.add_option("--verbose",
            action="store_const", const=logging.INFO,  dest="loglevel",
            help="log level Info and above")
    group.add_option("--debug",
            action="store_const", const=logging.DEBUG, dest="loglevel",
            help="log level Debug and above")
    group.add_option("--trace",
            action="store_const", const=logging.TRACE, dest="loglevel",
            help="log level Trace and above")
    group.add_option("--warning",
            action="store_const", const=logging.WARNING, dest="loglevel",
            help="log level Warning and above, the default")
    group.add_option("--quiet",
            action="store_const", const=logging.CRITICAL, dest="loglevel",
            help="log level Critical only")

    group.add_option("--logfile", dest="logfile",
            type="string", default=None,
            help="Local logfile for debugging [default: %default]")
            
    optparser.add_option_group(group)
    
    optparser.add_option("--window", dest="winstate",
            type="string", default="visible",
            help="Window state for the user interface; "
            "'visible' to display the user interface window. "
            "'minimize' to start NIMBY with a minimized window.")
            
    optparser.add_option("--exitvalue", dest="onExit",
            type="string", default="default",
            help="When nimby exits, it will set the nimby value to the "
            "specified value; "
            "'1' to only accept jobs spooled from the blade's host. "
            "'username' to only accept jobs from the named user. "
            "'0' to accept jobs from anyone. "
            "'default' to revert the blade to profile settings or its state " 
            "at startup via command line options.")
    
    rc = 1
    try:
        for arg in sys.argv:
            if arg.startswith("-psn"):
                # Mac OS X assigns a unique process serial number to all apps
                # launched with a GUI, so the -psn* argument can be ignored, or
                # else the optparser will complain about it.
                sys.argv.remove(arg)
    
        (options,args) = optparser.parse_args()
        if len(args) > 0:
            optparser.error("unrecognized option: " + str(args))
            return 1
        
        # allow $TRACTOR_ENGINE or $TRACTOR_MONITOR to set the
        # engine host name if it exists in the environment, 
        # UNLESS it has been explicitly set on the command line.
        if options.monitor == defaultMon:
            x = os.getenv('TRACTOR_ENGINE')
            if x == None: x = os.getenv('TRACTOR_MONITOR')
            if x != None:
                options.monitor = x

        if options.monitor != defaultMon:
            m,n,p = options.monitor.partition(":")
            if p != '':
                # if a port was specified, separate hostname and port
                options.monitor = m
                options.mPort = int(p)
            
        # Nimby will allow password to come in via NIMBY_PASSWORD
        # or TRACTOR_PASSWORD
        if options.passwd == None:
            if "NIMBY_PASSWORD" in os.environ:
                options.passwd = os.environ["NIMBY_PASSWORD"]
            elif "TRACTOR_PASSWORD" in os.environ:
                options.passwd = os.environ["TRACTOR_PASSWORD"]

        logger = logging.getLogger("nimby")
        logger.setLevel(options.loglevel)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        ch = logging.StreamHandler()

        if (options.logfile):
            ch = logging.FileHandler(options.logfile)

        ch.setLevel(options.loglevel)
        ch.setFormatter(formatter)
        logger.addHandler(ch)
                
        logger.info( appBuild )
        logger.info("Copyright (c) 2010-%d Pixar. All rights reserved." % 
                    datetime.datetime.now().year)
        logger.info("PID = " + str( os.getpid() ))
        
        
        app = PySide.QtGui.QApplication(sys.argv)
        
        nimby = NimbyRunner(options, logger, appBuild)
        
        # display the nimby UI.
        if nimby.Start(options.nimby):
        
            # This method returns when the UI is closed by the user.
            app.exec_()
        
            nimby.Stop()

    except SystemExit, e:
        rc = e

    except KeyboardInterrupt:
        print "received keyboard interrupt"
        rc = 0

    return rc
    
    
## ------------------------------------------------------------- ##

if __name__ == "__main__":
    
    rc = main()
    
    if 0 != rc:
        sys.exit(rc)

## ------------------------------------------------------------- ##
