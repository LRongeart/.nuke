set cut_paste_input [stack 0]
version 12.0 v3
push $cut_paste_input
Group {
 name RotoPaintBrush
 tile_color 0x71c671ff
 selected true
 xpos 574
 ypos 762
 addUserKnob {20 brushStrokeTab l Brush/Strokes}
 addUserKnob {4 brushChoice l "Brush Choice" M {Brush1 Brush2 Brush3 Brush4 Brush5 Brush6 Brush7 Brush8 "" ""}}
 addUserKnob {26 ""}
 addUserKnob {3 iterations}
 iterations 8
 addUserKnob {7 Rotate R 360 -360}
 addUserKnob {7 Opacity}
 Opacity 1
 addUserKnob {26 space l "" +STARTLINE +INVISIBLE T "              "}
 addUserKnob {26 ""}
 addUserKnob {41 toolbar_lifetime_type l Lifetime T RotoPaint_.toolbar_lifetime_type}
 addUserKnob {41 toolbar_lifetime_start l from -STARTLINE T RotoPaint_.toolbar_lifetime_start}
 addUserKnob {41 toolbar_lifetime_end l to -STARTLINE T RotoPaint_.toolbar_lifetime_end}
 addUserKnob {41 toolbar_source_time_offset l timeoffset -STARTLINE +INVISIBLE T RotoPaint_.toolbar_source_time_offset}
 addUserKnob {26 ""}
 addUserKnob {6 brushPreview l "Brush Preview" +STARTLINE}
 brushPreview true
 addUserKnob {6 crop l "Crop Final Result" +STARTLINE}
 crop true
 addUserKnob {26 ""}
 addUserKnob {4 filter M {Impulse Cubic Keys Simon Rifman Mitchell Parzen Notch Lanczos4 Lanczos6 Sinc4}}
 addUserKnob {26 ""}
 addUserKnob {20 tools l Tools n 1}
 addUserKnob {41 toolbox l "" -STARTLINE T RotoPaint_.toolbox}
 addUserKnob {41 curves l "" -STARTLINE T RotoPaint_.curves}
 addUserKnob {3 strokeCount +INVISIBLE}
 addUserKnob {3 cloneCount +INVISIBLE}
 addUserKnob {3 revealCount +INVISIBLE}
 addUserKnob {1 brushList l BrushList +INVISIBLE}
 addUserKnob {20 Scattering}
 addUserKnob {7 maxTranslateOffsetX l "Max Translate Offset X" R 0 1000}
 addUserKnob {7 maxTranslateOffsetY l "Max Translate Offset Y" R 0 1000}
 addUserKnob {26 ""}
 addUserKnob {7 maxRotateOffset l "Max Rotate Offset" R 0 360}
 addUserKnob {26 ""}
 addUserKnob {7 maxScaleOffset l "Max Scale Offset" R 0 10}
 addUserKnob {26 ""}
 addUserKnob {20 tools_1 l Tools n 1}
 addUserKnob {41 toolbox_1 l "" -STARTLINE T RotoPaintBrush.toolbox}
 addUserKnob {41 curves_1 l "" -STARTLINE T RotoPaintBrush.curves}
 addUserKnob {20 modifySelected l "Modify Selected"}
 addUserKnob {7 modifyScale l Scale R -2 2}
 addUserKnob {7 modifyRotate l Rotate R -360 360}
 addUserKnob {1 selectedBrush +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {20 tools_1_1 l Tools n 1}
 addUserKnob {41 toolbox_1_1 l "" -STARTLINE T RotoPaintBrush.toolbox_1}
 addUserKnob {41 curves_1_1 l "" -STARTLINE T RotoPaintBrush.curves_1}
 addUserKnob {20 signTab l ©}
 addUserKnob {26 RotoPaintBrushName l "" +STARTLINE T "<b>©RotoPaint Brush</b> V1.1"}
 addUserKnob {26 ""}
 addUserKnob {26 jordanSIgn l "" +STARTLINE T "Jordan Boulais-Richard - jordanboulaisrichard@gmail.com"}
}
 Input {
  inputs 0
  name BG
  xpos 290
  ypos 29
 }
set N10cff040 [stack 0]
 Dot {
  name Dot2
  label BG
  note_font_size 61
  xpos -2272
  ypos 6554
  hide_input true
 }
 Remove {
  name Remove1
  xpos -1867
  ypos 6551
 }
set N10d09460 [stack 0]
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "size: \[value RotoPaint_.toolbar_brush_size]"
  old_message {{115 105 122 101 58 32 49 48 49}
    }
  old_expression_markers {{6 8}
    }
  box {{(BG.width/4/2)-100} {BG.height-BG.height/2.5+10} {(BG.width/4/2)+180} {BG.height-BG.height/2.5+50+10}}
  transforms {{0 2}
    }
  cursor_position 6
  global_font_scale 0.4
  center {2023 1011.5}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{1.5 2020.5}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2023 1011.5 0 0 1 1 0 0 0 0}
    }
  name Text2
  xpos -1047
  ypos 6408
  hide_input true
 }
 Input {
  inputs 0
  name iBrush8
  xpos 1395
  ypos 32
  number 8
 }
 Input {
  inputs 0
  name iBrush7
  xpos 1285
  ypos 32
  number 7
 }
 Input {
  inputs 0
  name iBrush6
  xpos 1175
  ypos 32
  number 6
 }
 Input {
  inputs 0
  name iBrush5
  xpos 1065
  ypos 32
  number 5
 }
 Input {
  inputs 0
  name iBrush4
  xpos 955
  ypos 32
  number 4
 }
 Input {
  inputs 0
  name iBrush3
  xpos 845
  ypos 32
  number 3
 }
 Input {
  inputs 0
  name iBrush2
  xpos 737
  ypos 30
  number 2
 }
 Input {
  inputs 0
  name iBrush1
  xpos 633
  ypos 30
  number 1
 }
 Switch {
  inputs 8
  which {{parent.brushChoice}}
  name brushSwitch
  label "\[value which]"
  xpos -1593
  ypos 6336
  hide_input true
 }
 Transform {
  translate {{((BG.width/4)/2)-input.width/2} {BG.height-BG.height/2.5/2-center.y}}
  rotate {{parent.Rotate}}
  scale {{RotoPaint_.toolbar_brush_size/200}}
  center {{input.width/2} {input.height/2}}
  shutteroffset centred
  name TransformPreview
  xpos -1593
  ypos 6435
 }
 Crop {
  box {{0 x1001 0 x1022 0} {BG.height-BG.height/2.5 x1001 1180 x1022 1174} {BG.width/4 x1001 1011.5 x1022 1040} {BG.height x1001 2023 x1022 2023}}
  name Crop2
  xpos -1593
  ypos 6488
 }
 Constant {
  inputs 0
  color {0.2150000036 0.2150000036 0.2150000036 0}
  name Constant1
  xpos -1734
  ypos 6245
 }
 Crop {
  box {{0 x1001 0 x1022 0} {BG.height-BG.height/2.5 x1001 1180 x1022 1174} {BG.width/4 x1001 1011.5 x1022 1040} {BG.height x1001 2023 x1022 2023}}
  name Crop1
  xpos -1734
  ypos 6390
 }
push $N10d09460
 Merge2 {
  inputs 2
  bbox B
  mix 0.4
  name Merge2
  xpos -1734
  ypos 6557
 }
 Merge2 {
  inputs 2
  mix {{parent.Opacity}}
  name Merge1
  xpos -1593
  ypos 6557
 }
 Merge2 {
  inputs 2
  mix 0.5
  name Merge4
  xpos -1047
  ypos 6557
 }
push $N10cff040
 Merge2 {
  inputs 2
  bbox B
  name Brush_Preview
  xpos -654
  ypos 6557
  disable {{!parent.brushPreview}}
 }
 Crop {
  box {0 0 {BG.width} {BG.height}}
  name EndCrop
  xpos -654
  ypos 6581
  disable {{!parent.crop}}
 }
set N10e63270 [stack 0]
push $N10e63270
 Output {
  name Output
  xpos -654
  ypos 7025
 }
 Viewer {
  inputs 2
  frame_range 100-100
  fps 23.97602463
  full_frame_processing true
  colour_sample_bbox {-0.04300543666 0.06945130974 -0.04251112044 0.06994562596}
  viewerProcess "sRGB (ACES)"
  name Viewer1
  xpos -3693
  ypos 630
 }
push $N10cff040
 RotoPaint {
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44fce000 x447ce000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0 opc 0}}}}}
  toolbox {selectAll {
  { selectAll bs 88 str 1 ssx 1 ssy 1 sf 1 }
  { selectCurves str 1 ssx 1 ssy 1 sf 1 }
  { selectPoints str 1 ssx 1 ssy 1 sf 1 }
  { selectFeatherPoints str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush bs 101 str 1 ssx 1 ssy 1 sf 1 sb 1 tt 17 }
  { eraser bs 220 src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 ltn 1022 ltm 1022 tt 18 }
  { clone bs 94 src 1 stx 204 sty 346 str 1 ssx 1 ssy 1 sf 1 sb 1 tt 19 }
  { reveal bs 112 src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 tt 20 }
  { dodge bs 201 src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 tt 21 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 tt 22 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 ltn 1022 ltm 1022 tt 23 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_size 101
  toolbar_brush_hardness 0.200000003
  toolbar_lifetime_type single
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {1024 778}
  colorOverlay {0 0 0 0}
  opacity 0
  view {}
  motionblur_on true
  motionblur_shutter_offset_type centred
  brush_size 101
  brush_spacing 0.05000000075
  brush_hardness 0.200000003
  source_black_outside true
  name RotoPaint_
  knobChanged "\nimport random\n\n\ndef getDefaultNodes():\n    nodes = \{\}\n\n    nodes\['BG'] = nuke.toNode(\"BG\")\n    nodes\['Brush1'] = nuke.toNode(\"Brush1\")\n    nodes\['RotoPaint_'] = nuke.toNode(\"RotoPaint_\")\n    nodes\['Output'] = nuke.toNode(\"Output\")\n    nodes\['BlendingMode'] = nuke.toNode('BlendingMode')\n    nodes\['Brush_Preview'] = nuke.toNode('Brush_Preview')\n    nodes\['TransformPreview'] = nuke.toNode(\"TransformPreview\")\n    nodes\['REVEAL'] = nuke.toNode('REVEAL')\n    nodes\['transFilter'] = nuke.toNode('transFilter')\n    return nodes\n\n\ndef brushPreview(n, k, nodes):\n    ##############################################\n    ###########   BRUSH PREVIEW   ################\n    ##############################################\n\n    exp = nodes\['TransformPreview']\['scale'].toScript()\n    nodes\['TransformPreview']\['scale'].fromScript(exp)\n    nodes\['TransformPreview'].setInput(0, nuke.toNode('brushSwitch'))\n\ndef modifySelected(n):\n    ##############################################\n    ##########   MODIFY SELECTED   ###############\n    ##############################################\n    curves = n\['curves']\n    selected = curves.getSelected()\[0]\n    name = selected.name\n    nodeName = ''\n    modifyScale = n.parent()\['modifyScale']\n    modifyRotate = n.parent()\['modifyRotate']\n    #modifyOpacity = n.parent()\['modifyOpacity']\n\n    selectedBrushKnob = n.parent()\['selectedBrush']\n\n    if selectedBrushKnob.value() == '':\n        selectedBrushKnob.setValue(name)\n        pass\n    elif selectedBrushKnob.value() == name:\n        pass\n    # BAKE FORMER SELECTED BRUSH\n    elif selectedBrushKnob.value() != name:\n        search = selectedBrushKnob.value()\n        transforms = \[]\n        for node in nuke.allNodes('Transform'):\n            if node\['label'].value() == search:\n                transforms.append(node)\n\n        for transform in transforms:\n            transform\['scale'].setValue(transform\['scale'].value())\n            transform\['scale'].clearAnimated()\n            transform\['rotate'].setValue(transform\['rotate'].value())\n            transform\['rotate'].clearAnimated()\n\n        Merges = \[]\n        for node in nuke.allNodes('Merge2'):\n            if node\['label'].value() == search and node.name().count('Merge') == 1:\n                Merges.append(node)\n\n        for merge in Merges:\n            merge\['mix'].clearAnimated()\n\n        modifyScale.setValue(0)\n        modifyRotate.setValue(0)\n        #modifyOpacity.setValue(0)\n        if name == 'Root':\n            selectedBrushKnob.setValue('')\n            return\n\n    transforms = \[]\n    for node in nuke.allNodes('Transform'):\n        if node\['label'].value() == name:\n            transforms.append(node)\n\n    Merges = \[]\n    for node in nuke.allNodes('Merge2'):\n        if node\['label'].value() == name and node.name().count('Merge') == 1:\n            if node.name() != nodeName:\n                Merges.append(node)\n\n\n    for transform in transforms:\n        transform\['scale'].setExpression('\{0\}+parent.modifyScale'.format(transform\['scale'].value()))\n        transform\['rotate'].setExpression('\{0\}+parent.modifyRotate'.format(transform\['rotate'].value()))\n\n    # for merge in Merges:\n    #     merge\['mix'].setExpression('\{0\}+parent.modifyOpacity'.format(merge\['mix'].value()))\n\n    selectedBrushKnob.setValue(name)\n\n\ndef getBrushVariables(n, brush, nodes):\n    brushVar = \{\}\n    brushVar\['curves'] = n\['curves']\n    brushVar\['brushSize'] = n\['toolbar_brush_size'].value()\n    brushVar\['iterations'] = int(n.parent()\['iterations'].value())\n    brushVar\['opacity'] = float(n.parent()\['Opacity'].value())\n    brushVar\['rotate'] = float(n.parent()\['Rotate'].value())\n    brushVar\['eval'] = brush.evaluate(nuke.frame())\n    brushVar\['maxScaleOffset'] = int(n.parent()\['maxScaleOffset'].value())\n    brushVar\['maxTranslateOffsetX'] = int(n.parent()\['maxTranslateOffsetX'].value())\n    brushVar\['maxTranslateOffsetY'] = int(n.parent()\['maxTranslateOffsetY'].value())\n    brushVar\['maxRotateOffset'] = int(n.parent()\['maxRotateOffset'].value())\n    brushVar\['maxScaleOffset'] = int(n.parent()\['maxScaleOffset'].value())\n    brushVar\['lifetimeType'] = n\['toolbar_lifetime_type'].value()\n    brushVar\['lifetimeStart'] = int(n\['toolbar_lifetime_start'].value())\n    brushVar\['lifetimeEnd'] = int(n\['toolbar_lifetime_end'].value())\n    brushVar\['filter'] = str(n.parent()\['filter'].value())\n    brushVar\['brushChoice'] = str(int(n.parent()\['brushChoice'].getValue()) + 1)\n\n    print(brushVar\['brushChoice'])\n    return brushVar\n\n\ndef createTransform(nodes, Num, brushVar, i, steps, brushListC, type):\n    t = nuke.createNode('Transform', inpanel=False)\n    labelT = t\['label']\n    if 'Reveal' in type:\n        labelT.setValue('Reveal\{0\}'.format(Num))\n    elif 'Clone' in type:\n        labelT.setValue('Clone\{0\}'.format(Num))\n    elif 'Brush' in type:\n        labelT.setValue('Brush\{0\}'.format(Num))\n    t.setInput(0, nuke.toNode('iBrush\{0\}'.format(brushVar\['brushChoice'])))\n    t\['center'].setExpression(\"iBrush\{0\}.width/2\".format(brushVar\['brushChoice']), 0)\n    t\['center'].setExpression(\"iBrush\{0\}.height/2\".format(brushVar\['brushChoice']), 1)\n    t\['rotate'].setValue((random.uniform(0, 1) * brushVar\['maxRotateOffset']) + brushVar\['rotate'])\n    t\['scale'].setValue((random.uniform(0, 1) * brushVar\['maxScaleOffset']) + (brushVar\['brushSize'] / 200))\n    t\['translate'].setExpression(\n        '\{0\}-iBrush\{1\}.width/2'.format(int((random.uniform(0, 1) * brushVar\['maxTranslateOffsetX'])\n                                       + brushVar\['eval'].getPoint(steps * i)\[0]), brushVar\['brushChoice']), 0)\n    t\['translate'].setExpression(\n        '\{0\}-iBrush\{1\}.height/2'.format(int((random.uniform(0, 1) * brushVar\['maxTranslateOffsetY'])\n                                        + brushVar\['eval'].getPoint(steps * i)\[1]), brushVar\['brushChoice']), 1)\n    t\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (len(brushListC) + 1))\n    t\['xpos'].setValue(nodes\['BG']\['xpos'].value() + 100)\n    t\['filter'].setValue(brushVar\['filter'])\n\n    return t\n\n\ndef createMergeT(nodes, brushListC, type, num):\n\n    mergeT = nuke.createNode('Merge2', inpanel=False)\n    mergeT\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (len(brushListC) + 1))\n    mergeT\['xpos'].setValue(nodes\['BG']\['xpos'].value() + 100)\n    mergeT\['bbox'].setValue('union')\n    labelT = mergeT\['label']\n    if 'Reveal' in type:\n        labelT.setValue('Reveal\{0\}'.format(num))\n    elif 'Clone' in type:\n        labelT.setValue('Clone\{0\}'.format(num))\n    elif 'Brush' in type:\n        labelT.setValue('Brush\{0\}'.format(num))\n\n    return mergeT\n\n\ndef setLifeTime(mix, brushVar):\n\n    if brushVar\['lifetimeType'] == 'all':\n        pass\n    elif brushVar\['lifetimeType'] == 'single':\n        mix.setAnimated()\n        mix.setValueAt(0, nuke.frame() - 1)\n        mix.setValueAt(brushVar\['opacity'], nuke.frame())\n        mix.setValueAt(0, nuke.frame() + 1)\n    elif brushVar\['lifetimeType'] == 'from start':\n        mix.setAnimated()\n        mix.setValueAt(brushVar\['opacity'], brushVar\['lifetimeEnd'])\n        mix.setValueAt(0, brushVar\['lifetimeEnd'] + 1)\n    elif brushVar\['lifetimeType'] == 'to end':\n        mix.setAnimated()\n        mix.setValueAt(0, brushVar\['lifetimeStart'] - 1)\n        mix.setValueAt(brushVar\['opacity'], brushVar\['lifetimeStart'])\n    elif brushVar\['lifetimeType'] == 'range':\n        mix.setAnimated()\n        mix.setValueAt(0, brushVar\['lifetimeStart'] - 1)\n        mix.setValueAt(brushVar\['opacity'], brushVar\['lifetimeStart'])\n        mix.setValueAt(brushVar\['opacity'], brushVar\['lifetimeEnd'])\n        mix.setValueAt(0, brushVar\['lifetimeEnd'] + 1)\n\n\ndef addClone(n, k, cloneNum, currentCLone, nodes):\n    ##############################################\n    #############   ADD CLONE   ##################\n    ##############################################\n\n    brushList = n.parent()\['brushList'].value().split(\" \")\n    brushListC = brushList\n    for split in brushList:\n        if split == \" \" or split == \"\":\n            brushListC.remove(split)\n\n    curves = n\['curves']\n    brush = curves.toElement('Clone' + str(cloneNum))\n\n    brushVar = getBrushVariables(n, brush, nodes)\n\n    steps = 1.0 / float(brushVar\['iterations'])\n    oldt = None\n    oldm = None\n    m = None\n\n    # CREATE ITERATIONS\n    # TRANSFORMS & MERGE\n    mergeT = createMergeT(nodes, brushListC, 'Clone', cloneNum)\n    for i in range(1, brushVar\['iterations']+1, 1):\n        t = createTransform(nodes, cloneNum, brushVar, i, steps, brushListC, 'Clone')\n\n        # BREAK CONCATENATION\n        d = nuke.createNode('Dot', inpanel=False)\n        nuke.delete(d)\n\n        if i > 2:\n            i = i + 1\n        mergeT.setInput(i - 1, t)\n\n    # CREATE TRANSFORMMASKED\n    clone = nuke.createNode('TransformMasked', inpanel=False)\n    clone\['translate'].setValue(nodes\['RotoPaint_']\['source_transform_translate'].x(), 0)\n    clone\['translate'].setValue(nodes\['RotoPaint_']\['source_transform_translate'].y(), 1)\n    clone\['name'].setValue(\"clone\{0\}\".format(cloneNum))\n    clone\['filter'].setValue(brushVar\['filter'])\n    if brushListC == \[]:\n        clone.setInput(0, nodes\['BG'])\n    else:\n        inputName = ''\n        name = brushListC\[-1]\n        if 'B' in name:\n            inputName = 'b' + name.split('B')\[1]\n        elif 'C' in name:\n            inputName = 'c' + name.split('C')\[1]\n        elif 'R' in name:\n            inputName = 'r' + name.split('R')\[1]\n        clone.setInput(0, nuke.toNode(inputName))\n\n    clone.setInput(1, mergeT)\n    clone\['xpos'].setValue(nodes\['BG']\['xpos'].value())\n    clone\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (len(brushListC) + 1))\n    clone\['label'].setValue('Clone\{0\}'.format(cloneNum))\n    clone\['mix'].setValue(brushVar\['opacity'])\n    clone.setSelected(False)\n    # SET LIFETIME\n    mix = clone\['mix']\n    setLifeTime(mix, brushVar)\n    nodes\['Brush_Preview'].setInput(0, clone)\n\n    n.parent()\['cloneCount'].setValue(cloneNum)\n    brushListValue = n.parent()\['brushList'].value()\n    n.parent()\['brushList'].setValue(brushListValue + \"Clone\{0\}\".format(cloneNum) + \" \")\n\n\ndef removeClone(n, k, cloneNum, currentClone, nodes):\n    ##############################################\n    ############   REMOVE CLONE   ################\n    ##############################################\n\n    nodes = getDefaultNodes()\n    curves = n\['curves']\n\n    brushList = n.parent()\['brushList'].value().split(\" \")\n    brushListC = brushList\n    for split in brushList:\n        if split == \" \" or split == \"\":\n            brushListC.remove(split)\n\n    onlyClones = \[]\n    for brush in brushListC:\n        if brush.count('Clone') == 1:\n            onlyClones.append(brush)\n\n    # FIND MISSING STROKE\n    for c in onlyClones:\n        brush = curves.toElement(c)\n        try:\n            # SI ON NE PEUT FAIRE UN EVALUATE LA STROKE N'EXISTE PAS\n            brush.evaluate(nuke.frame())\n        except:\n            ###REMOVE NODES\n            for node in nuke.allNodes():\n                if node\['label'].value() == c:\n                    nuke.delete(node)\n            # SET BRUSH_PAINT BRUSH LIST KNOB\n            newVal = ''\n            brushListC.remove(c)\n            for c in brushListC:\n                newVal = newVal + c + \" \"\n            n.parent()\['brushList'].setValue(newVal)\n\n    n.parent()\['cloneCount'].setValue(cloneNum)\n\n\ndef addBrush(n, k, strokeNum, currentNumStroke, nodes):\n    ##############################################\n    #############   ADD BRUSH   ##################\n    ##############################################\n\n    brushList = n.parent()\['brushList'].value().split(\" \")\n    brushListC = brushList\n    for split in brushList:\n        if split == \" \" or split == \"\":\n            brushListC.remove(split)\n\n    brushO = False\n    for b in brushListC:\n        if b == 'Brush1':\n            brushO = True\n\n    curves = n\['curves']\n    brush = curves.toElement('Brush' + str(strokeNum))\n\n    brushVar = getBrushVariables(n, brush, nodes)\n    steps = 1.0/float(brushVar\['iterations'])\n    oldt = None\n    oldm = None\n    m = None\n\n    # CREATE FINAL MERGE\n    finalMerge = nuke.createNode('Merge2', inpanel=False)\n    finalMerge\['name'].setValue(\"brush\" + str(strokeNum))\n    if brushListC == \[]:\n        finalMerge.setInput(0, nodes\['BG'])\n    else:\n        inputName = ''\n        name = brushListC\[-1]\n        if 'B' in name:\n            inputName = 'b' + name.split('B')\[1]\n        elif 'C' in name:\n            inputName = 'c' + name.split('C')\[1]\n        elif 'R' in name:\n            inputName = 'r' + name.split('R')\[1]\n        finalMerge.setInput(0, nuke.toNode(inputName))\n\n    finalMerge\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (len(brushListC) + 1))\n    finalMerge\['xpos'].setValue(nodes\['BG']\['xpos'].value())\n    finalMerge\['label'].setValue(\"Brush\{0\}\".format(strokeNum))\n    mix = finalMerge\['mix']\n    mix.setValue(brushVar\['opacity'])\n    setLifeTime(mix, brushVar)\n    finalMerge.setSelected(False)\n\n    ### CREATE ITERATIONS\n\n    #TRANSFORM & MERGE\n    for i in range(1, brushVar\['iterations']+1, 1):\n        t = createTransform(nodes, strokeNum, brushVar, i, steps, brushListC, 'Brush')\n\n        # BREAK CONCATENATION\n        d = nuke.createNode('Dot', inpanel=False)\n        nuke.delete(d)\n\n        # SKIP MASK INPUT\n        if i > 1:\n            i = i + 1\n        finalMerge.setInput(i, t)\n\n    nodes\['Brush_Preview'].setInput(0, finalMerge)\n    # BRUSHPAINT NODE\n    n.parent()\['strokeCount'].setValue(strokeNum)\n    brushListValue = n.parent()\['brushList'].value()\n    n.parent()\['brushList'].setValue(brushListValue + \"Brush\{0\}\".format(strokeNum) + \" \")\n\n\ndef removeBrush(n, k, strokeNum, currentNumStroke, nodes):\n    ##############################################\n    ############   REMOVE BRUSH   ################\n    ##############################################\n\n    nodes = getDefaultNodes()\n    curves = n\['curves']\n\n    brushList = n.parent()\['brushList'].value().split(\" \")\n    brushListC = brushList\n    for split in brushList:\n        if split == \" \" or split == \"\":\n            brushListC.remove(split)\n\n    onlyBrushs = \[]\n    for brush in brushListC:\n        if brush.count('Brush') == 1:\n            onlyBrushs.append(brush)\n\n    # FIND MISSING STROKE\n    for b in onlyBrushs:\n        brush = curves.toElement(b)\n        try:\n            # SI ON NE PEUT FAIRE UN EVALUATE LA STROKE N'EXISTE PAS\n            brush.evaluate(nuke.frame())\n        except:\n            # REMOVE NODES\n            for node in nuke.allNodes():\n                if node\['label'].value() == b:\n                    nuke.delete(node)\n            # SET BRUSH_PAINT BRUSH LIST KNOB\n            newVal = ''\n            brushListC.remove(b)\n            for b in brushListC:\n                newVal = newVal + b + \" \"\n            n.parent()\['brushList'].setValue(newVal)\n\n    n.parent()\['strokeCount'].setValue(strokeNum)\n\n\ndef addReveal(n, k, revealNum, currentRevealStroke, nodes):\n    ###############################################\n    #############   ADD REVEAL   ##################\n    ###############################################\n\n    brushList = n.parent()\['brushList'].value().split(\" \")\n    brushListC = brushList\n    for split in brushList:\n        if split == \" \" or split == \"\":\n            brushListC.remove(split)\n\n    curves = n\['curves']\n    brush = curves.toElement('Reveal' + str(revealNum))\n    brushVar = getBrushVariables(n, brush, nodes)\n\n    steps = 1.0/float(brushVar\['iterations'])\n    oldt = None\n    oldm = None\n    m = None\n\n    # CREATE ITERATIONS\n\n    # TRANSFORMS & MERGE\n    mergeT = createMergeT(nodes, brushListC, 'Reveal', revealNum)\n    for i in range(1, brushVar\['iterations'] + 1, 1):\n        t = createTransform(nodes, revealNum, brushVar, i, steps, brushListC, 'Reveal')\n\n        # BREAK CONCATENATION\n        d = nuke.createNode('Dot', inpanel=False)\n        nuke.delete(d)\n\n        # SKIP MASK INPUT\n        if i > 2:\n            i = i + 1\n        mergeT.setInput(i - 1, t)\n\n    # CREATE KEYMIX\n    keyMix = nuke.createNode('Keymix', inpanel=False)\n    keyMix\['name'].setValue(\"reveal\" + str(revealNum))\n    if brushListC == \[]:\n        keyMix.setInput(0, nodes\['BG'])\n    else:\n        inputName = ''\n        name = brushListC\[-1]\n        if 'B' in name:\n            inputName = 'b' + name.split('B')\[1]\n        elif 'C' in name:\n            inputName = 'c' + name.split('C')\[1]\n        elif 'R' in name:\n            inputName = 'r' + name.split('R')\[1]\n        keyMix.setInput(0, nuke.toNode(inputName))\n\n    keyMix.setInput(2, mergeT)\n    keyMix.setInput(1, nodes\['REVEAL'])\n    keyMix\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (len(brushListC) + 1))\n    keyMix\['xpos'].setValue(nodes\['BG']\['xpos'].value())\n    keyMix\['label'].setValue(\"Reveal\{0\}\".format(revealNum))\n    mix = keyMix\['mix']\n    mix.setValue(brushVar\['opacity'])\n    setLifeTime(mix, brushVar)\n    nodes\['Brush_Preview'].setInput(0, keyMix)\n    # BRUSHPAINT NODE\n    n.parent()\['revealCount'].setValue(revealNum)\n    brushListValue = n.parent()\['brushList'].value()\n    n.parent()\['brushList'].setValue(brushListValue + \"Reveal\{0\}\".format(revealNum) + \" \")\n    keyMix.setSelected(False)\n\n\ndef removeReveal(n, k, revealNum, currentRevealStroke, nodes):\n    ###############################################\n    ############   REMOVE REVEAL   ################\n    ###############################################\n\n        curves = n\['curves']\n\n        brushList = n.parent()\['brushList'].value().split(\" \")\n        brushListC = brushList\n        for split in brushList:\n            if split == \" \" or split == \"\":\n                brushListC.remove(split)\n\n        onlyReveals = \[]\n        for brush in brushListC:\n            if brush.count('Reveal') == 1:\n                onlyReveals.append(brush)\n\n        # FIND MISSING STROKE\n        for r in onlyReveals:\n            brush = curves.toElement(r)\n            try:\n                # SI ON NE PEUT FAIRE UN EVALUATE LA STROKE N'EXISTE PAS\n                brush.evaluate(nuke.frame())\n            except:\n                # REMOVE NODES\n                for node in nuke.allNodes():\n                    if node\['label'].value() == r:\n                        nuke.delete(node)\n\n                # SET BRUSH_PAINT BRUSH LIST KNOB\n                newVal = ''\n                brushListC.remove(r)\n                for r in brushListC:\n                    newVal = newVal + r + \" \"\n                n.parent()\['brushList'].setValue(newVal)\n\n        n.parent()\['revealCount'].setValue(revealNum)\n\n\ndef getCurvesList(n):\n    curve = n\['curves']\n    root = curve.rootLayer\n    curvesList = \[]\n    for obj in root:\n        curvesList.append(obj.name)\n    curvesList.reverse()\n    return curvesList\n\n\ndef getBrushsList(brushsStr):\n    splits = brushsStr.split(\" \")\n\n    brushList = \[]\n    for split in splits:\n        if split == '' or split == \" \":\n            pass\n        brushList.append(split)\n    brushList.remove(\"\")\n    return brushList\n\n\ndef changeStrokeOrder(n, curveList, nodes):\n\n    newList = ''\n\n    for i, curve in enumerate(curveList):\n\n        if 'Brush' in curve:\n            name = 'brush' + curve.split('Brush')\[1]\n        elif 'Clone' in curve:\n            name = 'clone' + curve.split('Clone')\[1]\n        elif 'Reveal' in curve:\n            name = 'reveal' + curve.split('Reveal')\[1]\n        mainNode = nuke.toNode(name)\n        if i == 0:\n            mainNode.setInput(0, nodes\['BG'])\n        else:\n            topNode = curveList\[i-1]\n            if 'Brush' in topNode:\n                topName = 'brush' + topNode.split('Brush')\[1]\n            elif 'Clone' in topNode:\n                topName = 'clone' + topNode.split('Clone')\[1]\n            elif 'Reveal' in topNode:\n                topName = 'reveal' + topNode.split('Reveal')\[1]\n            mainNode.setInput(0, nuke.toNode(topName))\n\n        mainNode\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (i+1))\n\n        # Transforms\n        for node in nuke.allNodes('Transform'):\n            if node\['label'].value() == curve:\n                node\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (i+1))\n\n        # Merge\n        for node in nuke.allNodes('Merge2'):\n            if node\['label'].value() == curve:\n                node\['ypos'].setValue(nodes\['BG']\['ypos'].value() + 200 * (i+1))\n        newList = newList + curve + \" \"\n    nodes\['Brush_Preview'].setInput(0, nuke.toNode(name))\n\n    return newList\n\n\ndef main():\n    n = nuke.thisNode()\n    k = nuke.thisKnob()\n    nodes = getDefaultNodes()\n\n    # BRUSH PREVIEW\n    if k == n\['toolbar_brush_size']:\n        brushPreview(n, k, nodes)\n    # CLONE\n    cloneNum = n\['curves'].toScript().count('cubiccurve Clone')\n    currentClone = int(n.parent()\['cloneCount'].value())\n    if cloneNum > currentClone:\n        addClone(n, k, cloneNum, currentClone, nodes)\n    elif k == n\['curves'] and cloneNum < currentClone:\n        removeClone(n, k, cloneNum, currentClone, nodes)\n    # BRUSH\n    strokeNum = n\['curves'].toScript().count('cubiccurve Brush')\n    currentNumStroke = int(n.parent()\['strokeCount'].value())\n    if k == n\['curves'] and strokeNum > currentNumStroke:\n        addBrush(n, k, strokeNum, currentNumStroke, nodes)\n    elif k == n\['curves'] and strokeNum < currentNumStroke:\n        removeBrush(n, k, strokeNum, currentNumStroke, nodes)\n    # REVEAL\n    revealNum = n\['curves'].toScript().count('cubiccurve Reveal')\n    currentRevealStroke = int(n.parent()\['revealCount'].value())\n    if k == n\['curves'] and revealNum > currentRevealStroke:\n        addReveal(n, k, revealNum, currentNumStroke, nodes)\n    elif k == n\['curves'] and revealNum < currentRevealStroke:\n        removeReveal(n, k, revealNum, currentRevealStroke, nodes)\n    try:\n        modifySelected(n)\n    except:\n        pass\n\n    # CHANGE STROKE ORDER\n    curvesList = getCurvesList(n)\n    brushsStr = n.parent()\['brushList'].value()\n    brushList = getBrushsList(brushsStr)\n\n    if curvesList != brushList:\n        newList = changeStrokeOrder(n, curvesList, nodes)\n        n.parent()\['brushList'].setValue(newList)\n\n\nmain()\n\n"
  xpos 400
  ypos 29
 }
push $N10cff040
 Dot {
  name REVEAL
  label REVEAL
  note_font_size 41
  xpos -340
  ypos 26
 }
end_group
